=encoding utf8
=pod

=head1 NAME

B<I<parent>> - 컴파일타임에 base 클래스와의 ISA 관계를 형성

=head1 SYNOPSIS

	package Baz;
	use parent qw(Foo Bar);

=head1 DESCRIPTION

하나 이상의 모듈을 로드하고 동시에 모듈로부터 상속을 받는다.
다음과 비슷한 효과를 얻는다.

	package Baz;
	BEGIN {
		require Foo;
		require Bar;
		push @ISA, qw(Foo Bar);
	}

기본적으로, 모든 base 클래스는 자신이 정의된 파일(pm)에 위치한다.
한 부모클래스와 그 자식 클래스를 같은 파일에 위치시키고 싶다면(패키지로만 분리된 경우), I<-norequire>과 함께 I<parent>를 사용할 수 있다.

	package Foo;
	sub exclaim { "I CAN HAS PERL" }

	package DoesNotLoadFooBar;
	use parent -norequire, 'Foo', 'Bar';
	# will not go looking for Foo.pm or Bar.pm

위의 코드는 다음과 같다.

	package Foo;
	sub exclaim { "I CAN HAS PERL" }

	package DoesNotLoadFooBar;
	push @DoesNotLoadFooBar::ISA, 'Foo', 'Bar';

이것은 한 패키지가 다른 이름을 가진 파일에 존재할 때 유용하다.

	package MyHash;
	use Tie::Hash;
	use parent -norequire, 'Tie::StdHash';

위 코드는 B<Tie::Hash>에 B<Tie::StdHash>패키지가 존재하는 경우에 사용된다. 이것은 다음의 코드와 동일하다.

	package MyHash;
	require Tie::Hash;
	push @ISA, 'Tie::StdHash';

=cut
