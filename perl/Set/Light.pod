=encoding utf8
=pod

=head1 NAME

Set::Light - 메모리 효율적인 문자열의 순서없는 set

	use Set::Light;

	my $set = Set::Light->new( qw/foo bar baz/ );

	if (!$set->is_empty())
	{
		print "Set has ", $set->size(), " elements.\n";
		for (qw/umpf foo bar baz bam/)
		{
			print "Set does ";
			print " not " unless $set->has($_);
			print "contain '$_'.\n";
		}
	}

=head1 DESCRIPTION

Set::Light는 문자열의 순서없는 set을 구현한다. 해시를 사용하고, 해시의 각 키는 같은 스칼라를 가리킴으로써 메모리를 아낀다.

=head2 Why not use a hash?

일반적으로 항목의 목록을 추적하기 위해 해시를 사용한다.

	my %SEEN;
	...
	if (!$SEEN->{$item}++)
	{
		# haven't seen item before
	}

이것은 매우 빠르지만, I<%SEEN>의 각 키가 하나의 스칼라를 요구하기 때문에 메모리 낭비가 심하다.

=head2 Why not use Set::Object or Set::Scalar?

이것들은 해시보다도 느리고 메모리 낭비가 심하다.

=head1 METHODS

=head2 new()

다음은 Set::Light object를 생성한다.

	my $set = Set::Light->new();

해시 레퍼런스가 옵션을 가지고 있을 수 있다. 다음의 옵션들은 지원되지 않는다.

	my $set = Set::Light->new( { myoption => 1, foobar => 2 });

다음은 set이 멤버를 포함하게 된다.

	my $set = Set::Light->new( qw/for bar baz/);

=head2 size()

다음은 set의 요소 개수를 반환한다.

	my $elems = $set->size();

=head2 is_empty()

set이 비어있다면 참을 반환한다.

	$set->is_empty()

=head2 is_null()

I<is_empty>와 같다.

=head2 has()/contains()/exists()

문자열 I<$member>를 가지고 있다면 참을 반환한다. 

	$set->has($member)

세 메소드는 같다.

=head2 insert()

다음은 문자열을 set에 삽입하는 것을 나타낸다. 실제로 삽입된 개수를 반환한다.

	$set->insert( $string );
	$set->insert( @strings );

이미 삽입된 값은 무시된다.

=head2 delete()/remove()

한 개 이상의 요소를 제거한다. 실제로 제거된 개수를 반환한다.

	$set->delete( $string );
	$set->delete( @strings );

두 메소드는 같다.



=cut
