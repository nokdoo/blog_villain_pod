=encoding utf8
=pod

=head1 const type qualifier

L<c type system|https://en.cppreference.com/w/c/language/type>의 각 타입은 여러 I<qualified> version를 가질 수 있다. qualified version은 B<const>, L<volatile|https://en.cppreference.com/w/c/language/volatile>, 그리고 object 타입의 포인터에 대한 L<restrict|https://en.cppreference.com/w/c/language/restrict>를 말한다. 이 글에서는 B<const>의 기능에 대해 설명한다.

B<const-qualified> 타입으로 L<선언된|https://en.cppreference.com/w/c/language/const> object는 컴파일러에 의해 read-only 메모리에 위치하게 된다. 프로그램이 const object의 주소를 가져올 수 없다면 그 주소에는 저장할 방법이 없다.

const는 L<lvalue|https://en.cppreference.com/w/c/language/value_category> expression에만 적용된다. lvalue를 필요로 하지 않는 위치에서 이를 사용한다면, const qualifier는 사라진다. (volatile은 사라지지 않는다.)

const-qualified 타입의 object를 표시하는 lvalue expression과, const-qualified 타입의 멤버를 가진 struct 또는 union 타입의 object를 표시하는 lvalue expression은 I<modifiable lvalue>가 아니다. 특히 이들은 할당될 수 없다 : 

	const int n = 1; // object of const type
	n = 2; // error: the type of n is const-qualified

	int x = 2; // object of unqualified type
	const int* p = &x;
	*p = 3; // error: the type of the lvalue *p is const-qualified

	struct {int a; const int b; } s1 = {.b=1}, s2 = {.b=2};
	s1 = s2; // error: the type of s1 is unqualified, but it has a const member

const-qualified structure 또는 union 타입의 멤버는 자신이 속한 타입의 qualification(여기에서는 const)을 얻는다.

	struct s { int i; const int ci; } s;
	// the type of s.i is int, the type of s.ci is const int
	const struct s cs;
	// the types of cs.i and cs.ci are both const int
	
배열이 const type qualifier와 함께 선언된다면, 배열의 타입은 const가 아니지만 요소들의 타입은 const다. 함수가 const type qualifier와 함꼐 선언된다면, 그 함수는 undefined behavior를 갖는다.

	typedef int A[2][3];
	const A a = {{4, 5, 6}, {7, 8, 9}}; // array of array of const int
	int* pi = a[0]; // Error: a[0] has type const int*

const-qualified L<compound literal|https://en.cppreference.com/w/c/language/compound_literal>은 특정 object를 지시할 필요가 없다. 이것은 서로 다른 compound literal과 저장소를 공유하거나, 같거나 overlapping representation을 갖는 string literal과 저장소를 공유한다.

	const int* p1 = (const int[]){1, 2, 3};
	const int* p2 = (const int[]){2, 3, 4}; // the value of p2 may equal p1+1
	_Bool b = "foobar" + 3 == (const char[]){"bar"}; // the value of b may be 1

non-const 타입 포인터는 묵시적으로, 같은 const-qualified version 포인터나 L<compatible type|https://en.cppreference.com/w/c/language/type#Compatible_types> 포인터로 변환될 수 있다. 캐스팅을 이용하면 역으로도 변환이 가능하다.

	int* p = 0;
	const int* cp = p; // OK: adds qualifiers (int to const int)
	p = cp; // Error: discards qualifiers (const int to int)
	p = (int*)cp; // OK: cast

T 포인터의 포인터는 const T 포인터의 포인터로 변환될 수 없다. 두 타입이 호환되려면 qualification이 일치해야 한다.

	char *p = 0;
	const char **cpp = &p; // Error: char* and const char* are not compatible types
	char * const *pcp = &p; // OK, adds qualifiers (char* to char*const)

타입이 const-qualified인 object를 수정하려는 것은 undefined behavior를 유발한다.

	const int n = 1; // object of const-qualified type
	int* p = (int*)&n;
	*p = 2; // undefined behavior

함수 선언에서, 배열 파라미터를 선언하는데 사용되는 [] 내부에 const가 들어갈 수 있다. 이것은 배열의 포인터임을 나타낸다.

다음 두 함수는 같다.

	void f(double x[const], const double y[const]);
	void f(double * const x, const double * const y);

=cut

